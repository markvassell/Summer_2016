# corn yield
s$CRSYLD1[t] <<- 94.1206 + 0.6488*(s$CRENRS1[t]+s$CRVARC1[t])/s$CRVARC1[t] +
4.6159/10*((s$CRENRS1[t]+s$CRVARC1[t])/s$CRVARC1[t] + (s$CRENRS1[t-1]+s$CRVARC1[t-1])/s$CRVARC1[t-1]
+ (s$CRENRS1[t-2]+s$CRVARC1[t-2])/s$CRVARC1[t-2] + (s$CRENRS1[t-3]+s$CRVARC1[t-3])/s$CRVARC1[t-3]
+ (s$CRENRS1[t-4]+s$CRVARC1[t-4])/s$CRVARC1[t-4] + (s$CRENRS1[t-5]+s$CRVARC1[t-5])/s$CRVARC1[t-5]
+ (s$CRENRS1[t-6]+s$CRVARC1[t-6])/s$CRVARC1[t-6] + (s$CRENRS1[t-7]+s$CRVARC1[t-7])/s$CRVARC1[t-7]
+ (s$CRENRS1[t-8]+s$CRVARC1[t-8])/s$CRVARC1[t-8] + (s$CRENRS1[t-9]+s$CRVARC1[t-9])/s$CRVARC1[t-9]) +
- 0.0146*s$USPLT1[t] - 0.0406*s$CRSPLT1[t] + 1.8950*(s$years[t]-1979) + s$CRE2[t] #+ e.i$CRSYLD1[t]
# corn production
s$CRSPRD1[t] <<- s$CRSHAR1[t] * s$CRSYLD1[t]
# corn feed
s$CRDFED[t] <<- ( 0.68 +
- 0.0641475*s$CRPFRM[t]/s$LPIGCAU[t] +
- 0.65858*(1.13*s$WHDFED[t]+0.95*s$SGDFED[t]+0.77*s$BRDFED[t]+0.51*s$OTDFED[t])/s$GCAU[t] +
- 0.55*s$GFDDOM[t]*2/56/s$GCAU[t] +
+ 0.0004275*s$SMP48D[t]/s$LPIGCAU[t] +
- 0.0100*max(0,s$CRPFRM[t]*2000/56*1.1-s$SMP48D[t])*2/56*s$HPAU[t]/s$GCAU[t] +
+ 0.16689*s$CRSPRD1[t-1]/s$GCAU[t] +
- 1.1*(s$DGCONBE[t]*s$DGDCOBE[t] + s$DGCONPK[t]*s$DGDCOPK[t] + s$DGCONBR[t]*s$DGDCOBR[t] +
+ s$DGCONDY[t]*s$DGDCODY[t])*2/56/s$GCAU[t] +
+ s$CRE22[t] ) * s$GCAU[t]
#+ e.i$CRDFED[t]/s$GCAU[t] ) * s$GCAU[t]
# corn seed use
s$CRDSED[t] <<- ( 0.2400 + 0.0153*s$SHIFT84[t] + s$CRE23[t] ) * s$CRSPLT1[t]
#+ e.i$CRDSED[t]/s$CRSPLT1[t] ) * s$CRSPLT1[t]
#   # corn 9-month loan stocks
s$CRD9MO[t] <<- plogis( -.698 - 1.5955*(s$CRPFRM[t] + s$CRLDPRT[t])/s$CRPLNR1[t-1] +
- 0.694*s$SHIFT93[t] + s$CRE27[t] + 0*e.i$CRD9MO[t] ) * s$CRSPRD1[t-1]
# corn free stocks
for (t.i in t[1]:t[length(t)]) {
s$CRDFRE[t.i] <<- 1800 +
+ 34.6528/(s$CRPFRM[t.i]/s$PDCGNPX[t.i]) +
+ 0.1500*(s$CRSPRD1[t.i-1] + s$CRSIMP1[t.i-1] + s$CRDFRE[t.i-1] +
s$CRDFOR[t.i-1] + s$CRD9MO[t.i-1] + s$CRDCCC[t.i-1]) +
- 0.3859*(s$CRDCCC[t.i] + s$CRDFOR[t.i]) +
- 0.8000*s$CRD9MO[t.i] +
- 0.1216*s$CRSPRD1[t.i] +
- 62.3403*(s$ZTIME[t.i]-1981) +
+ s$CRE29[t.i]
#+ e.i$CRDFRE[t.i]
s$CRDFRE[s$CRDFRE<100 & s$years==solve.years] <<- 100
}
# corn exports
for (t.i in t[1]:t[length(t)])
s$CRDEXP[t.i] <<- 890 +
+ 0.5*s$CRDEXP[t.i-1] +
- 354*s$CRPFRM[t.i] +
+ 66*s$CRPFRM[t.i-1] +
+ 51*s$WHPFRM[t.i] +
+ 6.5*s$WHPFRM[t.i-1] +
+ 29*s$SGPFRM[t.i] +
- 10.5*s$SGPFRM[t.i-1] +
+ 0.40*s$SMP48D[t.i] +
- 0.20*s$SMP48D[t.i-1] +
+ 9*s$SBPMKT[t.i] +
+ 10.5*s$SBPMKT[t.i-1] +
+ 2*s$RCPEXTH[t.i] +
+ 3*s$RCPEXTH[t.i-1] +
+ 23*s$CTPFE[t.i] +
+ 31.5*s$CTPFE[t.i-1] +
+ 16.2*(s$years[t.i]-1980) +
+ s$CRE41[t.i]
#+ e.i$CRDEXP[t.i]
}
# calculate errors
#structural_eqns(e) # calculate quantities given prices
#e <- basedata - s # calculate residuals
# this is the place to do shocks
#e$S1[years==2014] <- 10
# make errors stochastic
N <- 1 # number of iterations
# e <- e[rep(1:nrow(e),N),] # repeat rows
# e[,'i'] <- (1:((N)*n))
# e[,'iter'] <- (e[,'i']-1) %/% n + 1
# e$S1 <- rnorm(nrow(e), e$S1, rep(5,N*n))
# e$D1 <- rnorm(nrow(e), e$D1, rep(5,N*n))
# e$S2 <- rnorm(nrow(e), e$S2, rep(5,N*n))
# e$D2 <- rnorm(nrow(e), e$D2, rep(5,N*n))
for (i in 1:N) {
# full model, structural equations with identities
model <- function(x) {
vars <- c('CRPFRM')
s[t, vars] <<- matrix(x, nrow=length(t), ncol=length(vars), byrow=FALSE)
e.i <- e[(n*(i-1)+1):(i*n),]
structural_eqns(e.i)
# model closing equations
identities <- list()
identities$comm1 <- s$CRSPRD1[t-1] + s$CRSIMP1[t-1] + s$CRDFOR[t-1] + s$CRDCCC[t-1] + s$CRD9MO[t-1] +
s$CRDFRE[t-1] +
- s$CRDFED[t] - s$CRDSED[t] - s$CRDFOD[t] - s$CRDHFC[t] - s$CRDGAS[t] - s$CRDEXP[t] +
- s$CRDFRE[t] - s$CRD9MO[t] - s$CRDCCC[t] - s$CRDFOR[t]
unlist(identities) # equations to solve
}
s$iter <- i
ans <- BBsolve(par=c(s$CRPFRM[t]), fn=model, control=list(tol=1e-5))
if (i==1) stoch <- s[t,]
else stoch <- rbind(stoch, s[t,])
}
summary_chart('CRPFRM')
# matrix(s$CRSYLD1[c(t-1,t-2,t-3)],nrow=length(t)) %*% rep(1/3,3)
# e[t, apply(e[t,],2,'sum') != 0] # rerun e after first pass and this will tell differences
require("BB")
setwd('D:/R')
if(!exists("summary_chart", mode = "function"))
source("model_functions.R")
basedata <- read.csv('crop_data.csv', header=TRUE) # import data
setwd('/Users/Dennis/Documents/work/Work/Summer/conda/')
require("BB")
setwd('/Users/Dennis/Documents/work/Work/Summer/conda/')
if(!exists("summary_chart", mode = "function"))
source("model_functions.R")
basedata <- read.csv('crop_data.csv', header=TRUE) # import data
names(basedata)[names(basedata)=='ZTIME'] <- 'years'
n <- nrow(basedata) # length of historical data
# set up data frame for storing solutions
s <- basedata
solve.years <- 2014:2024 # solve years
t <- match(solve.years, basedata$years)
# full model, structural equations with identities
model <- function(x) {
s[t, vars] <<- matrix(x, nrow=length(t), ncol=length(vars), byrow=FALSE)
eqs <- list()
# expected prices
eqs$CREPFM1 <- .253 + 0.747*s$CRSYLD1[t-1]/s$CREYLD1[t-1] + s$CRE3[t]  - s$CREPFM1[t]/s$CRPFRM[t]
# expected market gross returns
eqs$CREMGR1 <- s$CREPFM1[t]*s$CREYLD1[t] - s$CREMGR1[t]
# Average LDP and MLG rates, actual and expected
eqs$CRLDPRT <- 0.25*max(0,s$CRPLNR1[t-1]+0.40-s$CRPFRM[t]) + 0.5*max(0,s$CRPLNR1[t-1]+0.20-s$CRPFRM[t]) +
+ 0.25*max(0,s$CRPLNR1[t-1]-s$CRPFRM[t]) + s$CRE4[t] - s$CRLDPRT[t]
eqs$CRELDPR1 <- 0.25*max(0,s$CRPLNR1[t]+0.40-s$CREPFM1[t]) + 0.5*max(0,s$CRPLNR1[t]+0.20-s$CREPFM1[t]) +
+ 0.25*max(0,s$CRPLNR1[t]-s$CREPFM1[t]) - s$CRELDPR1[t]
# corn expected net returns
eqs$CRENRS1 <- s$CREMGR1[t] +
+ s$CRELDPA1[t]*s$ATBL1[t] +
+ .25*(1-s$CRACRPR1[t])*s$CRECCPA1[t] + 0.75*s$CICRPRS1[t]/s$CRSPLT1[t] +
+ (1*(1-s$COARCPT1[t])+.25*s$COARCPT1[t])*s$CRACRPR1[t]*s$CREACAC1[t] - s$CRVARC1[t] - s$CRENRS1[t]
# corn planted area
#   s$CRSPLT1[t] <<- 11.9 * ((s$CRENRS1[t]+s$STNRPTON[t]*(s$STLFSPRD[t]+s$STELSPRD[t])/s$CRSHAR1[t-1])/s$PDCGNP1[t]*2/3 +
#      (s$CRENRS1[t-1] +s$STNRPTON[t-1]*(s$STLFSPRD[t-1]+s$STELSPRD[t-1])/s$CRSHAR1[t-2])/s$PDCGNP1[t-1]/3) + e.i$CRSPLT1[t]
# corn harvested area
eqs$CRSHAR1 <- s$CRSPLT1[t] * s$CRHPRAT1[t] - s$CRSHAR1[t]
# corn yield
eqs$CRSYLD1 <- 94.1206 + 0.6488*(s$CRENRS1[t]+s$CRVARC1[t])/s$CRVARC1[t] +
4.6159/10*((s$CRENRS1[t]+s$CRVARC1[t])/s$CRVARC1[t] + (s$CRENRS1[t-1]+s$CRVARC1[t-1])/s$CRVARC1[t-1]
+ (s$CRENRS1[t-2]+s$CRVARC1[t-2])/s$CRVARC1[t-2] + (s$CRENRS1[t-3]+s$CRVARC1[t-3])/s$CRVARC1[t-3]
+ (s$CRENRS1[t-4]+s$CRVARC1[t-4])/s$CRVARC1[t-4] + (s$CRENRS1[t-5]+s$CRVARC1[t-5])/s$CRVARC1[t-5]
+ (s$CRENRS1[t-6]+s$CRVARC1[t-6])/s$CRVARC1[t-6] + (s$CRENRS1[t-7]+s$CRVARC1[t-7])/s$CRVARC1[t-7]
+ (s$CRENRS1[t-8]+s$CRVARC1[t-8])/s$CRVARC1[t-8] + (s$CRENRS1[t-9]+s$CRVARC1[t-9])/s$CRVARC1[t-9]) +
- 0.0146*s$USPLT1[t] - 0.0406*s$CRSPLT1[t] + 1.8950*(s$years[t]-1979) + s$CRE2[t] - s$CRSYLD1[t]
# corn production
eqs$CRSPRD1 <- s$CRSHAR1[t] * s$CRSYLD1[t] - s$CRSPRD1[t]
# corn feed
eqs$CRDFED <- ( 0.68 +
- 0.0641475*s$CRPFRM[t]/s$LPIGCAU[t] +
- 0.65858*(1.13*s$WHDFED[t]+0.95*s$SGDFED[t]+0.77*s$BRDFED[t]+0.51*s$OTDFED[t])/s$GCAU[t] +
- 0.55*s$GFDDOM[t]*2/56/s$GCAU[t] +
+ 0.0004275*s$SMP48D[t]/s$LPIGCAU[t] +
- 0.0100*max(0,s$CRPFRM[t]*2000/56*1.1-s$SMP48D[t])*2/56*s$HPAU[t]/s$GCAU[t] +
+ 0.16689*s$CRSPRD1[t-1]/s$GCAU[t] +
- 1.1*(s$DGCONBE[t]*s$DGDCOBE[t] + s$DGCONPK[t]*s$DGDCOPK[t] + s$DGCONBR[t]*s$DGDCOBR[t] +
+ s$DGCONDY[t]*s$DGDCODY[t])*2/56/s$GCAU[t] +
+ s$CRE22[t] ) * s$GCAU[t] - s$CRDFED[t]
# corn seed use
eqs$CRDSED <- ( 0.2400 + 0.0153*s$SHIFT84[t] + s$CRE23[t] ) * s$CRSPLT1[t] - s$CRDSED[t]
#     #   # corn 9-month loan stocks
#     s$CRD9MO[t] <<- plogis( -.698 - 1.5955*(s$CRPFRM[t] + s$CRLDPRT[t])/s$CRPLNR1[t-1] +
#                               - 0.694*s$SHIFT93[t] + s$CRE27[t] + 0*e.i$CRD9MO[t] ) * s$CRSPRD1[t-1]
#
#     # corn free stocks
#     for (t.i in t[1]:t[length(t)]) {
#       s$CRDFRE[t.i] <<- 1800 +
#         + 34.6528/(s$CRPFRM[t.i]/s$PDCGNPX[t.i]) +
#         + 0.1500*(s$CRSPRD1[t.i-1] + s$CRSIMP1[t.i-1] + s$CRDFRE[t.i-1] +
#                     s$CRDFOR[t.i-1] + s$CRD9MO[t.i-1] + s$CRDCCC[t.i-1]) +
#         - 0.3859*(s$CRDCCC[t.i] + s$CRDFOR[t.i]) +
#         - 0.8000*s$CRD9MO[t.i] +
#         - 0.1216*s$CRSPRD1[t.i] +
#         - 62.3403*(s$ZTIME[t.i]-1981) +
#         + s$CRE29[t.i]
#       #+ e.i$CRDFRE[t.i]
#
#       s$CRDFRE[s$CRDFRE<100 & s$years==solve.years] <<- 100
#     }
#
#     # corn exports
#     for (t.i in t[1]:t[length(t)])
#       s$CRDEXP[t.i] <<- 890 +
#       + 0.5*s$CRDEXP[t.i-1] +
#       - 354*s$CRPFRM[t.i] +
#       + 66*s$CRPFRM[t.i-1] +
#       + 51*s$WHPFRM[t.i] +
#       + 6.5*s$WHPFRM[t.i-1] +
#       + 29*s$SGPFRM[t.i] +
#       - 10.5*s$SGPFRM[t.i-1] +
#       + 0.40*s$SMP48D[t.i] +
#       - 0.20*s$SMP48D[t.i-1] +
#       + 9*s$SBPMKT[t.i] +
#       + 10.5*s$SBPMKT[t.i-1] +
#       + 2*s$RCPEXTH[t.i] +
#       + 3*s$RCPEXTH[t.i-1] +
#       + 23*s$CTPFE[t.i] +
#       + 31.5*s$CTPFE[t.i-1] +
#       + 16.2*(s$years[t.i]-1980) +
#       + s$CRE41[t.i]
#
eqs$comm1 <- s$CRSPRD1[t-1] + s$CRSIMP1[t-1] + s$CRDFOR[t-1] + s$CRDCCC[t-1] + s$CRD9MO[t-1] +
s$CRDFRE[t-1] +
- s$CRDFED[t] - s$CRDSED[t] - s$CRDFOD[t] - s$CRDHFC[t] - s$CRDGAS[t] - s$CRDEXP[t] +
- s$CRDFRE[t] - s$CRD9MO[t] - s$CRDCCC[t] - s$CRDFOR[t]
unlist(eqs) # equations to solve
}
vars <- c('CREPFM1', 'CREMGR1', 'CRLDPRT', 'CRELDPR1', 'CRENRS1', 'CRSHAR1', 'CRSYLD1', 'CRSPRD1', 'CRDFED', 'CRDSED', 'CRPFRM')
solve.vars <- unlist(s[t, vars])
ans <- BBsolve(par=solve.vars, fn=model, control=list(tol=1e-5))
#graph
var <- 'CRPFRM'
plot(solve.years, basedata[t, var])
lines(solve.years, s[t, var])
vars
lines
t
ans
require("BB")
setwd('/Users/Dennis/Desktop/Summer_2016')
basedata <- read.csv('data.csv', header=TRUE) # import data
n <- nrow(basedata) # length of historical data
# set up data frame for storing solutions
s <- basedata
solve.years <- 2014:2023 # solve years
t <- match(solve.years, basedata$YEAR)
# full model, structural equations with identities
model <- function(x) {
s[t, vars] <<- matrix(x, nrow=length(t), ncol=length(vars), byrow=FALSE)
eqs <- list()
# Nominal reference price (Deflator)
eqs$prRPCOnom <- x[(length(x)-9):length(x)]*s$DOMDEF[t]/100 - s$prRPCOnom[t]
# Corn farm price
eqs$prPPCO <- s$prRPCOnom[t]*.816 + s$e_prPPCO[t] - s$prPPCO[t]
# Corn expect market price
eqs$prEPCOmkt <- s$prPPCO[t] - s$prEPCOmkt[t]
# Corn expect yield
eqs$crYECOto <- -2.28290274642977 + 0.107815751601678*(s$YEAR[t]-1900) - s$crYECOto[t]
# Corn expected revenue
eqs$Y262_EMktRct <- s$prEPCOmkt[t]*s$crYECOto[t] - s$Y262_EMktRct[t]
# Corn expect mkt net return
eqs$prENCOmkt <- s$Y262_EMktRct[t] - s$prVCCO[t] - s$prENCOmkt[t]
# Corn planted area, price component
eqs$crAPCOpri <-
10.611101118283*s$prENCOmkt[t] +
-0.902382503422328*s$prENSRmkt[t] +
-1.47558373064159*s$prENWHmkt[t] +
-0.245657668808256*s$prENCTmkt[t] +
-6.83910949962186*s$prENSB[t] +
- s$crAPCOpri[t]
# Behav. corn area planted
eqs$crAPCOto <-
.5*s$crAPCOpri[t] +
.3*s$crAPCOpri[t-1] +
.2*s$crAPCOpri[t-2] +
ifelse(s$YEAR[t]>=2017, 1, 0)*40*(1+.15)^(s$YEAR[t]-2014) +
s$e_crAPCOto[t] +
- s$crAPCOto[t]
# Corn area harvested
eqs$crAHCOto <-
0.758855*s$crAPCOto[t-1] +
1.499*(s$YEAR[t-1]-1900)*s$crAPCOto[t-1]/1000 +
s$e_crAHCOto[t] +
- s$crAHCOto[t]
# Corn yield
eqs$crYLCOto <-
0.108737105543302*(s$YEAR[t-1]-1900) +
0.0913912636493641*s$prPPCO[t-1]/s$Fert_PPI[t-1] +
s$e_crYLCOto[t] +
- s$crYLCOto[t]
# Corn production
eqs$crPRCOto <- s$crYLCOto[t] * s$crAHCOto[t] - s$crPRCOto[t]
# Corn imports
eqs$crIMCOto <-
s$crIMCOto[t-1] +
2*s$crIMCOto[t-1]*(s$prPPCO[t]/s$prPPCO[t-1]-1) +
s$e_crIMCOto[t] +
- s$crIMCOto[t]
eqs$crIMCOto[eqs$crIMCOto<0] <- 0 # don't let imports be negative
# Corn supply
eqs$crSYCOto <- s$crESCOto[t-1] + s$crPRCOto[t] + s$crIMCOto[t] - s$crSYCOto[t]
# Behavioral corn exports
eqs$crEXCOto <-
2.96502892559359*s$lsPRHGjpn[t] +
2.96502892559359*s$Hog_PrdEU6[t] +
2.96502892559359*s$Hog_PrdUK[t] +
-441.214299056417*s$prPPCO[t]/s$SDR_exch[t] +
s$e_crEXCOto[t] +
- s$crEXCOto[t]
# Corn dom disapp
eqs$crDMCOto <-
s$crDMCOFD[t] +
s$crDMCOFE[t] + ifelse(s$YEAR[t]==2018,100000,0)*0 +
- s$crDMCOto[t]
# Corn for fuel, just hard coded in
# Corn FSI (food, seed, indust incl alc)
eqs$crDMCOFD <-
s$crDMCOOT[t] +
-99.0995281730836*s$POP[t] +
1.50026988753628*s$POP[t]*(s$YEAR[t-1]-1900) +
6.15613730393188*s$prPPWH[t]/s$All_CPI[t]*s$POP[t] +
-14.8824052828484*s$prPPCO[t]/s$All_CPI[t]*s$POP[t] +
1649.07060892978*s$RealDispInc[t] +
1.13148382687209*s$crAPCOto[t]*s$Crn_SeedRate[t+1]/1000 +
s$e_crDMCOFD[t] +
- s$crDMCOFD[t]
# Corn feed & resid (not sure if this is the correct equation to use)
eqs$crDMCOFE <-
471.267379169762*s$GCAU[t] +
0.248861330680676*s$prCPSM[t]/s$LivestockP[t]*s$GCAU[t] +
1.26455907960682*s$prPPSR[t]/s$LivestockP[t]*s$GCAU[t] +
0.427654411065806*s$prPPBA[t]/s$LivestockP[t]*s$GCAU[t] +
0.831092830565033*s$prPPOC[t]/s$LivestockP[t]*s$GCAU[t] +
-5.18301435157038*s$prPPCO[t]/s$LivestockP[t]*s$GCAU[t] +
0.624418*s$crDMCOFE[t-1]*s$GCAU[t]/s$GCAU[t-1] +
s$e_crDMCOFE[t] +
- s$crDMCOFE[t]
# Corn stocks (also not sure if this is the correct one to use)
eqs$crESCOto <-
-90*s$prPPCO[t] +
0.4*s$crPRCOto[t] +
s$e_crESCOto[t] +
- s$crESCOto[t]
# Corn closing equation
eqs$crClose <- s$crSYCOto[t] - (s$crEXCOto[t] + s$crDMCOto[t] + s$crESCOto[t])
unlist(eqs) # equations to solve
}
vars <- c('prRPCOnom', 'prPPCO', 'prEPCOmkt', 'crYECOto', 'Y262_EMktRct', 'prENCOmkt', 'crAPCOpri', 'crAPCOto', 'crAHCOto', 'crYLCOto',
'crPRCOto', 'crIMCOto', 'crSYCOto', 'crEXCOto', 'crDMCOto', 'crDMCOFD', 'crDMCOFE', 'crESCOto', 'prRPCO')
#vars <- vars[vars!=c('prRPCO')]
solve.vars <- unlist(s[t, vars])
ans <- BBsolve(par=solve.vars, fn=model, control=list(M=10, tol=1e-3, trace=FALSE, noimp=100))
#graph all endogenous variables
graphs <- function(var) {
plot(solve.years, basedata[t, var], main=var)
lines(solve.years, s[t, var])
}
for (i in 1:length(vars)) graphs(vars[i])
prEPCOmkt
$prEPCOmkt
eqs$prEPCOmkt
s$prPPCO[t] - s$prEPCOmkt[t]
-2.28290274642977 + 0.107815751601678*(s$YEAR[t]-1900) - s$crYECOto[t]
s$crYECOto[t]
0.107815751601678*(s$YEAR[t]-1900) - s$crYECOto[t]
(s$YEAR[t]-1900) - s$crYECOto[t]
-2.28290274642977 + 0.107815751601678*(s$YEAR[t]-1900) - s$crYECOto[t]
require("BB")
setwd('/Users/Dennis/Desktop/Summer_2016')
# full model, structural equations with identities
model <- function(d2) {
# d2: data frame with all values
# returns: data frame with values updated by equatiosn
# Nominal reference price (Deflator)
d2$prRPCOnom[t] <-
d2$prRPCO[t]*d2$DOMDEF[t]/100
# Corn farm price
d2$prPPCO[t] <-
.816*d2$prRPCOnom[t] +
d2$e_prPPCO[t]
# Corn expect market price
d2$prEPCOmkt[t] <- d2$prPPCO[t]
# Corn expect yield
d2$crYECOto[t] <-
-2.28290274642977 +
0.107815751601678*(d2$YEAR[t]-1900)
# Corn expected revenue
d2$Y262_EMktRct[t] <-
d2$prEPCOmkt[t]*d2$crYECOto[t]
# Corn expect mkt net return
d2$prENCOmkt[t] <-
d2$Y262_EMktRct[t] - d2$prVCCO[t]
# Corn planted area, price component
d2$crAPCOpri[t] <-
10.611101118283*d2$prENCOmkt[t] +
-0.902382503422328*d2$prENSRmkt[t] +
-1.47558373064159*d2$prENWHmkt[t] +
-0.245657668808256*d2$prENCTmkt[t] +
-6.83910949962186*d2$prENSB[t]
# Behav. corn area planted
d2$crAPCOto[t] <-
.5*d2$crAPCOpri[t] +
.3*d2$crAPCOpri[t-1] +
.2*d2$crAPCOpri[t-2] +
ifelse(d2$YEAR[t]>=2017, 1, 0)*40*(1+.15)^(d2$YEAR[t]-2014) +
d2$e_crAPCOto[t]
# Corn area harvested
d2$crAHCOto[t] <-
0.758855*d2$crAPCOto[t-1] +
1.499*(d2$YEAR[t-1]-1900)*d2$crAPCOto[t-1]/1000 +
d2$e_crAHCOto[t]
# Corn yield
d2$crYLCOto[t] <-
0.108737105543302*(d2$YEAR[t-1]-1900) +
0.0913912636493641*d2$prPPCO[t-1]/d2$Fert_PPI[t-1] +
d2$e_crYLCOto[t]
# Corn production
d2$crPRCOto[t] <- d2$crYLCOto[t] * d2$crAHCOto[t]
# Corn imports
d2$crIMCOto[t] <-
d2$crIMCOto[t-1] +
2*d2$crIMCOto[t-1]*(d2$prPPCO[t]/d2$prPPCO[t-1]-1) +
d2$e_crIMCOto[t]
d2$crIMCOto[d2$crIMCOto<0] <- 0 # don't let imports be negative
# Corn supply
d2$crSYCOto[t] <- d2$crESCOto[t-1] + d2$crPRCOto[t] + d2$crIMCOto[t]
# Behavioral corn exports
d2$crEXCOto[t] <-
2.96502892559359*d2$lsPRHGjpn[t] +
2.96502892559359*d2$Hog_PrdEU6[t] +
2.96502892559359*d2$Hog_PrdUK[t] +
-441.214299056417*d2$prPPCO[t]/d2$SDR_exch[t] +
d2$e_crEXCOto[t]
# Corn for fuel, just hard coded in
# Corn FSI (food, seed, indust incl alc)
d2$crDMCOFD[t] <-
d2$crDMCOOT[t] +
-99.0995281730836*d2$POP[t] +
1.50026988753628*d2$POP[t]*(d2$YEAR[t-1]-1900) +
6.15613730393188*d2$prPPWH[t]/d2$All_CPI[t]*d2$POP[t] +
-14.8824052828484*d2$prPPCO[t]/d2$All_CPI[t]*d2$POP[t] +
1649.07060892978*d2$RealDispInc[t] +
1.13148382687209*d2$crAPCOto[t]*d2$Crn_SeedRate[t+1]/1000 +
d2$e_crDMCOFD[t]
# Corn feed & resid (not sure if this is the correct equation to use)
d2$crDMCOFE[t] <-
471.267379169762*d2$GCAU[t] +
0.248861330680676*d2$prCPSM[t]/d2$LivestockP[t]*d2$GCAU[t] +
1.26455907960682*d2$prPPSR[t]/d2$LivestockP[t]*d2$GCAU[t] +
0.427654411065806*d2$prPPBA[t]/d2$LivestockP[t]*d2$GCAU[t] +
0.831092830565033*d2$prPPOC[t]/d2$LivestockP[t]*d2$GCAU[t] +
-5.18301435157038*d2$prPPCO[t]/d2$LivestockP[t]*d2$GCAU[t] +
0.624418*d2$crDMCOFE[t-1]*d2$GCAU[t]/d2$GCAU[t-1] +
d2$e_crDMCOFE[t]
# Corn dom disapp
d2$crDMCOto[t] <-
d2$crDMCOFD[t] +
d2$crDMCOFE[t]
# Corn stocks (also not sure if this is the correct one to use)
d2$crESCOto[t] <-
-90*d2$prPPCO[t] +
0.4*d2$crPRCOto[t] +
d2$e_crESCOto[t]
d2 # function result
}
closing.eqs <- function(x, d1) {
# x: array of values to try as solution
# d1: data frame with all variables
# returns: array of closing equation values
d1[t, vars] <- matrix(x, nrow=length(t), ncol=length(vars), byrow=FALSE) # insert variables to solve into dataset
d1 <- model(d1) # call model
eqs <- list()
# Corn closing equation
eqs$prRPCO <- d1$crSYCOto[t] - (d1$crEXCOto[t] + d1$crDMCOto[t] + d1$crESCOto[t])
unlist(eqs) # equations to solve
}
# get data
base.data <- read.csv('data.csv', header=TRUE) # import data from CSV file
# run model
solve.years <- 2014:2023 # solve years
vars <- c('prRPCO') # variables that are used for model closure
t <- match(solve.years, base.data$YEAR) # index of solve years (global variable that is needed for functions)
solve.vars <- unlist(base.data[t, vars]) # get starting values for solution
ans <- BBsolve(par=solve.vars, d=base.data, fn=closing.eqs, control=list(tol=1e-3, trace=FALSE, noimp=100)) # solve model
# get output
out.data <- base.data # create output data set
out.data[t, vars] <- matrix(ans$par, nrow=length(t), ncol=length(vars), byrow=FALSE) # get prices
out.data <- model(out.data) # get all other equation results
# output results to csv file
write.csv(out.data, file = 'Out.csv', row.names=FALSE, na='')
#graph all variables
graph.vars <- c('prRPCOnom', 'prPPCO', 'prEPCOmkt', 'crYECOto', 'Y262_EMktRct', 'prENCOmkt', 'crAPCOpri', 'crAPCOto', 'crAHCOto', 'crYLCOto',
'crPRCOto', 'crIMCOto', 'crSYCOto', 'crEXCOto', 'crDMCOto', 'crDMCOFD', 'crDMCOFE', 'crESCOto', 'prRPCO')
graph.vars <- c(vars, graph.vars)
graphs <- function(var) {
par(mar=c(8, 4, 4, 2)+.1, xpd=TRUE) # allow things to be drawn outside plot region
y.max <- max(base.data[t, var], out.data[t, var])*1.01
y.min <- min(base.data[t, var], out.data[t, var])*.99
plot(solve.years, base.data[t, var], main=var, ylim=c(y.min, y.max), type='l', lwd=2, xlab='Year', ylab='Value')
lines(solve.years, out.data[t, var], col='blue')
legend("bottom", inset=c(0, -.33),c("Baseline","Result"),lwd=c(2,1),col=c("black","blue"),lty=c(1,1), horiz=TRUE, bty='n')
}
for (i in 1:length(graph.vars)) graphs(graph.vars[i])
ans$par
out.data
d1[t, vars]
matrix(ans$par, nrow=length(t), ncol=length(vars), byrow=FALSE)
matrix(x, nrow=length(t), ncol=length(vars), byrow=FALSE)
ans
vars
t
eqs <- list()
eqs$prRPCO <- d1$crSYCOto[t] - (d1$crEXCOto[t] + d1$crDMCOto[t] + d1$crESCOto[t])
closing.eqs <- function(x, d1) {
d1[t, vars] <- matrix(x, nrow=length(t), ncol=length(vars), byrow=FALSE) # insert variables to solve into dataset
d1 <- model(d1) # call model
eqs <- list()
# Corn closing equation
eqs$prRPCO <- d1$crSYCOto[t] - (d1$crEXCOto[t] + d1$crDMCOto[t] + d1$crESCOto[t])
unlist(eqs) # equations to solve
}
closing.eqs
par
closing_eqs(solve.years, base.data)
closing.eqs(solve.years, base.data)
unlist
unlist(base.data[t, vars])
base.data
